from fastapi import HTTPException
from pydantic import BaseModel
from llama_index.llms.ollama import Ollama
from typing import Dict, List, Optional
import yaml
import ollama
import requests
import json
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import statistics
import time  # ‚úÖ A√ëADIR IMPORT QUE FALTA
from llama_index.llms.ollama import Ollama
from cache_manager import get_cache_manager
from rag import RAG

# ‚úÖ A√ëADIR ESTAS DOS L√çNEAS:
import nest_asyncio
nest_asyncio.apply()

# Importar LlamaIndex Settings y Evaluators (SIN RAGAS)
from llama_index.core.settings import Settings as LlamaSettings
from llama_index.core.evaluation import (
    FaithfulnessEvaluator,
    RelevancyEvaluator,
    CorrectnessEvaluator,
    SemanticSimilarityEvaluator,
    GuidelineEvaluator
)

# Obtener instancia del cache_manager
cache_manager = get_cache_manager()

class CompareRequest(BaseModel):
    message: str  
    models: List[str]
    collection: str
    judge_model: str  # Campo obligatorio para el juez
    include_retrieval_metrics: bool = False  # ‚úÖ A√ëADIR CAMPO QUE FALTA

def get_available_models(config):
    """Obtiene la lista de modelos disponibles en Ollama."""
    try:
        print("üîç Consultando modelos disponibles en Ollama...")
        try:
            models_response = ollama.list()
            print(f"üìã Respuesta de ollama.list(): {models_response}")
            if isinstance(models_response, dict) and 'models' in models_response:
                available_models = [model.get('name') for model in models_response['models'] if model.get('name')]
                print(f"‚úÖ Modelos encontrados: {available_models}")
                return available_models if available_models else [config.get("llm_name", "deepseek-r1:1.5b")]
            else:
                raise Exception("Formato de respuesta inv√°lido de ollama.list()")
        except Exception as ollama_error:
            print(f"‚ùå Error con ollama.list(): {ollama_error}, intentando fallback...")
            response = requests.get(f"{config.get('llm_url', 'http://localhost:11434')}/api/tags", timeout=10)
            response.raise_for_status()
            data = response.json()
            if 'models' in data:
                available_models = [model.get('name') for model in data['models'] if model.get('name')]
                print(f"‚úÖ Modelos encontrados via fallback: {available_models}")
                return available_models if available_models else [config.get("llm_name", "deepseek-r1:1.5b")]
            else:
                raise Exception("No se pudieron obtener los modelos disponibles")
                
    except Exception as e:
        print(f"‚ùå Error general obteniendo modelos: {e}")
        return [config.get("lllm_name", "deepseek-r1:1.5b")]

def academic_llamaindex_evaluation(request: CompareRequest, config: dict):
    """
    Evaluaci√≥n acad√©mica usando LlamaIndex: Juez eval√∫a respuestas, no las genera.
    """
    start_time = time.time()  # ‚úÖ A√ëADIR ESTA L√çNEA
    
    try:
        print("=== EVALUACI√ìN ACAD√âMICA CON LLAMAINDEX NATIVO ===")
        
        models_to_compare = request.models
        judge_model_name = request.judge_model
        user_question = request.message
        collection_name = request.collection
        
        print(f"üéØ Modelos a evaluar: {models_to_compare}")
        print(f"üë®‚Äç‚öñÔ∏è Modelo juez: {judge_model_name}")
        print(f"üìã Colecci√≥n: {collection_name}")
        print(f"‚ùì Pregunta: {user_question[:100]}...")
        
        # Validar que juez no est√© en modelos a comparar
        if judge_model_name in models_to_compare:
            raise ValueError("El modelo juez no puede estar en la lista de modelos a comparar")
        
        # 1. Configurar embeddings una vez
        cache_manager.ensure_embedding_model_ready(config)
        embed_model = cache_manager.get_cached_embedding_model()
        LlamaSettings.embed_model = embed_model
        
        # 2. Crear el LLM juez
        judge_llm = Ollama(model=judge_model_name, url=config["llm_url"], request_timeout=300.0)
        print(f"üèÖ Juez configurado: {judge_model_name}")
        
        # ‚úÖ CORREGIDO: Crear evaluadores con manejo de errores individual
        evaluators = {}
        
        # Evaluadores que funcionan bien
        try:
            evaluators["faithfulness"] = FaithfulnessEvaluator(llm=judge_llm)
            print("‚úÖ FaithfulnessEvaluator creado")
        except Exception as e:
            print(f"‚ùå Error creando FaithfulnessEvaluator: {e}")
        
        try:
            evaluators["relevancy"] = RelevancyEvaluator(llm=judge_llm)
            print("‚úÖ RelevancyEvaluator creado")
        except Exception as e:
            print(f"‚ùå Error creando RelevancyEvaluator: {e}")
        
        # CorrectnessEvaluator necesita manejo especial
        try:
            evaluators["correctness"] = CorrectnessEvaluator(llm=judge_llm)
            print("‚úÖ CorrectnessEvaluator creado")
        except Exception as e:
            print(f"‚ö†Ô∏è CorrectnessEvaluator no disponible: {e}")
        
        # A√±adir SemanticSimilarityEvaluator (no requiere LLM)
        try:
            evaluators["semantic_similarity"] = SemanticSimilarityEvaluator()
            print("‚úÖ SemanticSimilarityEvaluator creado")
        except Exception as e:
            print(f"‚ùå Error creando SemanticSimilarityEvaluator: {e}")
        
        # A√±adir GuidelineEvaluator (con guidelines espec√≠ficas)
        try:
            evaluators["guideline"] = GuidelineEvaluator(
                llm=judge_llm,
                guidelines="The response should be helpful, accurate, and based only on the provided context."
            )
            print("‚úÖ GuidelineEvaluator creado")
        except Exception as e:
            print(f"‚ö†Ô∏è GuidelineEvaluator no disponible: {e}")
        
        print(f"üìä Evaluadores disponibles: {list(evaluators.keys())}")
        
        if not evaluators:
            return {"error": "No se pudieron crear evaluadores", "results": {}, "metrics": {}}
        
        # 3. Conectar al √≠ndice existente
        print(f"üîç Conectando a colecci√≥n existente: {collection_name}")
        
        temp_config = config.copy()
        temp_config["collection_name"] = collection_name
        
        initial_llm = Ollama(model=models_to_compare[0], url=config["llm_url"], request_timeout=300.0)
        rag_instance = RAG(config_file=temp_config, llm=initial_llm)
        shared_index = rag_instance.qdrant_index()
        
        if shared_index is None:
            raise ValueError(f"No se pudo conectar a la colecci√≥n {collection_name}")
        
        print(f"‚úÖ Conectado a √≠ndice existente: {collection_name}")
        
        results = {}
        metrics = {}
        
        # ‚úÖ VARIABLE PARA QUERY_ENGINE (para retrieval metrics)
        query_engine = None
        
        # 4. Para cada modelo: evaluar con todos los evaluadores disponibles
        for model_name in models_to_compare:
            print(f"\nüîÑ Procesando modelo: {model_name}")
            
            # ‚úÖ INICIALIZAR model_metrics AQU√ç
            model_metrics = {}
            
            try:
                model_llm = Ollama(model=model_name, url=config["llm_url"], request_timeout=300.0)
                
                query_engine = shared_index.as_query_engine(
                    llm=model_llm,
                    similarity_top_k=config.get("similarity_top_k", 3),
                    response_mode="tree_summarize"
                )
                
                full_question = user_question + " You can only answer based on the provided context."
                response = query_engine.query(full_question)
                response_text = str(response).strip()
                
                print(f"   üìù Respuesta generada ({len(response_text)} chars): {response_text[:100]}...")
                results[model_name] = response_text
                
                # ‚úÖ MANTENER extracci√≥n de contexts para debugging
                retrieved_contexts = []
                if hasattr(response, 'source_nodes') and response.source_nodes:
                    for node in response.source_nodes:
                        retrieved_contexts.append(node.text)
                    print(f"      üìÑ Contexts recuperados del RAG: {len(retrieved_contexts)} fragmentos")
                    for i, ctx in enumerate(retrieved_contexts):
                        print(f"      üìÑ Context {i+1} ({len(ctx)} chars): {ctx[:150]}...")
                else:
                    print(f"      ‚ö†Ô∏è WARNING: No se recuperaron contexts de Qdrant")

                # ‚úÖ CORREGIR evaluaci√≥n seg√∫n documentaci√≥n LlamaIndex
                for metric_name, evaluator in evaluators.items():
                    try:
                        print(f"   üìä Evaluando {metric_name}...")
                        
                        if metric_name == "semantic_similarity":
                            eval_result = evaluator.evaluate_response(
                                response=response,
                                reference=user_question
                            )
                        else:
                            # faithfulness, relevancy, correctness, guideline
                            # NO pasar contexts - LlamaIndex los extrae autom√°ticamente
                            eval_result = evaluator.evaluate_response(
                                query=user_question,
                                response=response
                            )
                        
                        print(f"      üîç Resultado raw: {eval_result}")
                        print(f"      üîç Tipo resultado: {type(eval_result)}")
                        
                        if hasattr(eval_result, '__dict__'):
                            print(f"      üîç Atributos: {list(eval_result.__dict__.keys())}")
                        
                        # Extraer score
                        score = None
                        if hasattr(eval_result, 'score') and eval_result.score is not None:
                            score = float(eval_result.score)
                            print(f"      üìè Score encontrado: {score} (tipo: {type(eval_result.score)})")
                        else:
                            print(f"      ‚ö†Ô∏è Score no encontrado o es None")
                        
                        # Extraer passing
                        passing = None
                        if hasattr(eval_result, 'passing'):
                            passing = eval_result.passing
                            print(f"      ‚úÖ Passing encontrado: {passing} (tipo: {type(passing)})")
                        
                        # Extraer feedback
                        feedback = ""
                        if hasattr(eval_result, 'feedback') and eval_result.feedback:
                            feedback = str(eval_result.feedback)
                            print(f"      üí¨ Feedback: {feedback[:100]}...")
                        
                        # Convertir score si es necesario
                        if score is None and passing is not None:
                            score = 1.0 if passing else 0.0
                            print(f"      üîÑ Score convertido desde passing: {score}")
                        elif score is None:
                            score = 0.0
                            print(f"      ‚ö†Ô∏è Score por defecto: {score}")
                        
                        final_score = round(float(score), 2) if score is not None else 0.0
                        print(f"      ‚úÖ Score convertido: {final_score}")
                        print(f"      ‚úÖ {metric_name}: {final_score}")
                        
                        # ‚úÖ GUARDAR EN model_metrics
                        model_metrics[metric_name] = final_score
                        
                    except Exception as e:
                        print(f"      ‚ùå Error en {metric_name}: {e}")
                        print(f"      üîç Error completo: {type(e).__name__}: {e}")
                        model_metrics[metric_name] = 0.0
                
                # ‚úÖ CALCULAR PUNTUACI√ìN GENERAL CORRECTAMENTE
                valid_scores = [score for score in model_metrics.values() if isinstance(score, (int, float))]
                overall_score = sum(valid_scores) / len(valid_scores) if valid_scores else 0.0
                model_metrics["overall_score"] = overall_score
                
                print(f"üéØ {model_name} - Puntuaci√≥n general: {overall_score:.2f} (de {len(valid_scores)} m√©tricas v√°lidas)")
                
            except Exception as e:
                print(f"‚ùå Error procesando {model_name}: {str(e)}")
                results[model_name] = f"Error: {str(e)}"
                model_metrics = {"error": str(e)}
            
            # ‚úÖ ASEGURAR QUE model_metrics SIEMPRE SE ASIGNA
            metrics[model_name] = model_metrics
        
        print("\n=== EVALUACI√ìN ACAD√âMICA COMPLETADA ===")
        print(f"üìä Contexto: Colecci√≥n con pocos documentos puede resultar en scores altos")
        
        # ‚úÖ EVALUACI√ìN DE RETRIEVAL CORREGIDA
        retrieval_metrics = None
        if hasattr(request, 'include_retrieval_metrics') and request.include_retrieval_metrics and query_engine:
            print(f"\nüîç === INICIANDO EVALUACI√ìN DE RETRIEVAL ===")
            retrieval_metrics = evaluate_retrieval_metrics(
                query_engine=query_engine,
                user_query=request.message,  # ‚úÖ CAMBIAR DE request.question a request.message
                config=config
            )
            print(f"üîç === EVALUACI√ìN DE RETRIEVAL COMPLETADA ===\n")
        
        return {
            "results": results,
            "metrics": metrics,
            "retrieval_metrics": retrieval_metrics,
            "metadata": {
                "judge_model": request.judge_model,
                "total_models": len(models_to_compare),
                "collection": request.collection,
                "evaluation_time": time.time() - start_time,
                "retrieval_evaluated": retrieval_metrics is not None
            }
        }
        
    except Exception as e:
        print(f"‚ùå Error en evaluaci√≥n acad√©mica: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            "error": str(e),
            "results": {},
            "metrics": {},
            "retrieval_metrics": None,
            "metadata": {
                "judge_model": request.judge_model if hasattr(request, 'judge_model') else "unknown",
                "evaluation_time": time.time() - start_time if 'start_time' in locals() else 0
            }
        }

def evaluate_retrieval_metrics(query_engine, user_query, config):
    """
    Eval√∫a sistema de retrieval para la query espec√≠fica del usuario
    Solo m√©tricas nativas de LlamaIndex: Hit Rate y MRR
    """
    try:
        from llama_index.core.evaluation import RetrieverEvaluator
        
        print("üîç === EVALUACI√ìN DEL SISTEMA DE RETRIEVAL ===")
        print(f"üìÑ Modelo de Embeddings: {config.get('embedding_model', 'fastembed')}")
        print(f"üóÑÔ∏è Vector Store: Qdrant")
        print(f"‚ùì Query del usuario: '{user_query[:50]}...'")
        
        # Extraer retriever del query_engine
        retriever = query_engine.retriever
        
        # ‚úÖ Solo m√©tricas nativas disponibles en LlamaIndex
        evaluator = RetrieverEvaluator.from_metric_names(
            ["hit_rate", "mrr"], 
            retriever=retriever
        )
        
        print(f"\nüîç Evaluando retrieval para la query del usuario...")
        
        # Evaluar retrieval para la query espec√≠fica
        result = evaluator.evaluate(query=user_query)
        
        print(f"   üìä Hit Rate: {result.hit_rate:.3f}")
        print(f"   üìä MRR: {result.mrr:.3f}")
        print(f"   üìÑ Documentos recuperados: {len(result.retrieved_nodes) if hasattr(result, 'retrieved_nodes') else 'N/A'}")
        
        # Interpretaci√≥n para logs
        if result.hit_rate == 1.0:
            print(f"   ‚úÖ Se encontraron documentos relevantes")
        else:
            print(f"   ‚ö†Ô∏è No se encontraron documentos suficientemente relevantes")
        
        return {
            "query": user_query,
            "hit_rate": result.hit_rate,
            "mrr": result.mrr,
            "retrieved_count": len(result.retrieved_nodes) if hasattr(result, 'retrieved_nodes') else 0,
            "interpretation": {
                "hit_rate_status": "success" if result.hit_rate == 1.0 else "warning",
                "mrr_quality": "excellent" if result.mrr > 0.8 else "good" if result.mrr > 0.5 else "poor"
            },
            "metadata": {
                "embedding_model": config.get("embedding_model", "fastembed"),
                "vector_store": "qdrant",
                "evaluation_timestamp": time.time()
            }
        }
        
    except Exception as e:
        print(f"‚ùå Error en evaluaci√≥n de retrieval: {e}")
        return {
            "error": str(e),
            "query": user_query,
            "hit_rate": 0.0,
            "mrr": 0.0
        }